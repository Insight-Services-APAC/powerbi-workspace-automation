{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.63.48766",
      "templateHash": "15807018179294227963"
    }
  },
  "parameters": {
    "clientPrefix": {
      "type": "string",
      "defaultValue": "hss"
    },
    "region": {
      "type": "string",
      "defaultValue": "syd"
    },
    "aadObjectId": {
      "type": "string"
    },
    "env": {
      "type": "string",
      "defaultValue": "dev",
      "allowedValues": [
        "dev",
        "tst",
        "prd"
      ]
    },
    "publisherEmail": {
      "type": "string",
      "defaultValue": "paul.smithdale@insight.com"
    },
    "publisherName": {
      "type": "string",
      "defaultValue": "Paul Smithdale"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]"
    }
  },
  "functions": [],
  "variables": {
    "solutionSuffix": "powerbi",
    "cosmosDbName": "PowerBIAutomation",
    "apimName": "[format('{0}-{1}-{2}-api-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]",
    "appInsightsName": "[format('{0}-{1}-{2}-ain-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]",
    "cosmosName": "[format('{0}-{1}-{2}-cdb-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]",
    "storageName": "[toLower(format('{0}{1}{2}sta{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix')))]",
    "funcAppName": "[format('{0}-{1}-{2}-fun-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]",
    "appServiceName": "[format('{0}-{1}-{2}-asp-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]",
    "keyVaultName": "[format('{0}-{1}-{2}-key-{3}', parameters('clientPrefix'), parameters('region'), parameters('env'), variables('solutionSuffix'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('storageName')]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}/default/templates', variables('storageName'))]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-01-01",
      "name": "[variables('appServiceName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "capacity": 0
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-01-01",
      "name": "[variables('funcAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServiceName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2021-04-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2021-04-01').keys[0].value)]"
            },
            {
              "name": "cosmosDbName",
              "value": "[variables('cosmosDbName')]"
            },
            {
              "name": "CosmosDBConnection",
              "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName')), '2021-04-15').connectionStrings[0].connectionString]"
            },
            {
              "name": "AuthenticationConfig:ClientSecret",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=spPowerBISecret)', variables('keyVaultName'))]"
            },
            {
              "name": "AuthenticationConfig:ClientId",
              "value": "[format('@Microsoft.KeyVault(VaultName={0};SecretName=spPowerBIId)', variables('keyVaultName'))]"
            },
            {
              "name": "AuthenticationConfig:Tenant",
              "value": "362e8191-a703-4ccf-8e0a-68f31eb9d487"
            },
            {
              "name": "WEBSITE_RUN_FROM_PACKAGE",
              "value": "1"
            },
            {
              "name": "SubscriptionContainerName",
              "value": "Subscriptions"
            },
            {
              "name": "WorkspaceContainerName",
              "value": "Workspaces"
            },
            {
              "name": "ActivitiesContainerName",
              "value": "Activities"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServiceName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]",
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[0], split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[1])]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-04-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[parameters('tenantId')]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2021-04-01-preview",
      "name": "[format('{0}/add', variables('keyVaultName'))]",
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('funcAppName')), '2021-01-01', 'full').identity.principalId]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          },
          {
            "objectId": "[parameters('aadObjectId')]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "get",
                "list",
                "set"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('funcAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2021-01-01-preview",
      "name": "[variables('apimName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Consumption",
        "capacity": 0
      },
      "properties": {
        "publisherEmail": "[parameters('publisherEmail')]",
        "publisherName": "[parameters('publisherName')]"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2021-04-15",
      "name": "[variables('cosmosName')]",
      "location": "[parameters('location')]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "locationName": "[parameters('location')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2021-04-15",
      "name": "[format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName'))]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDbName')]"
        },
        "options": {
          "throughput": 400
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2021-04-15",
      "name": "[format('{0}/{1}/Subscriptions', variables('cosmosName'), variables('cosmosDbName'))]",
      "properties": {
        "resource": {
          "id": "Subscriptions",
          "partitionKey": {
            "paths": [
              "/id"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[0], split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2021-04-15",
      "name": "[format('{0}/{1}/Workspaces', variables('cosmosName'), variables('cosmosDbName'))]",
      "properties": {
        "resource": {
          "id": "Workspaces",
          "partitionKey": {
            "paths": [
              "/HSPName"
            ]
          },
          "defaultTtl": 2592000
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[0], split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2021-04-15",
      "name": "[format('{0}/{1}/Activities', variables('cosmosName'), variables('cosmosDbName'))]",
      "properties": {
        "resource": {
          "id": "Activities",
          "partitionKey": {
            "paths": [
              "/id"
            ]
          },
          "defaultTtl": 2592000
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[0], split(format('{0}/{1}', variables('cosmosName'), variables('cosmosDbName')), '/')[1])]"
      ]
    }
  ],
  "outputs": {
    "instrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageName')]"
    },
    "functionName": {
      "type": "string",
      "value": "[variables('funcAppName')]"
    }
  }
}